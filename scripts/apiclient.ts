// AUTOGENERATED, DO NOT EDIT

export const API_VERSION = '1.0.0'

export const MAX_RETRIES = 3

export const DEBUG_MODE = true

export const DEFAULT_USER = {
    name: 'John Doe',
    age: 30,
    created: '2023-03-14T15:09:26Z',
}

export const SUPPORTED_FORMATS = ['json', 'xml', 'yaml']

export const SAMPLE_PLAYLISTS = [
    {
        id: 'pl1',
        playlistId: 'playlist1',
        title: 'My Favorites',
        pinned: true,
        description: 'A collection of my favorite songs',
    },
    {
        id: 'pl2',
        playlistId: 'playlist2',
        title: 'Workout Mix',
        description: 'Songs for the gym',
    },
]

export const ERROR_CODES = {
    BAD_REQUEST: 400,
    NOT_FOUND: 404,
    RATE_LIMITED: 429,
    SERVER_ERROR: 500,
    UNAUTHORIZED: 401,
} as const

export interface ApiError {
    message: string
    statusCode?: number
}
export type ApiResponse<T> = { data: T; error: null } | { data: null; error: ApiError }

type MainExampleHandler1Handler = (
    params: main_ExampleParams,
) => Promise<ApiResponse<main_ExampleResponse>>
type MainExampleHandler2Handler = (
    params: main_ExampleParams,
) => Promise<ApiResponse<main_ExampleResponse>>
type MainHelloWorldHandler = () => Promise<ApiResponse<main_HelloWorldOutput>>
type MainGetPlaylistsHandler = () => Promise<ApiResponse<main_Playlist>>
type MainExampleWithExternalTypesHandler = (params: pkg_Type2) => Promise<ApiResponse<pkg_Type1>>
type MainTheHandlerHandler = () => Promise<ApiResponse<{}>>
type MainTheHandlerPtrHandler = () => Promise<ApiResponse<{}>>
type MainCircularHandler = (params: {}) => Promise<ApiResponse<main_Node>>
type MainWeHandleInputPointersHandler = (
    params: main_PointersAreUndefined,
) => Promise<ApiResponse<main_weHandleInputPointersOutput>>
type MainWeAlsoHandleEnumsHandler = (
    params: main_EnumLike,
) => Promise<ApiResponse<main_weAlsoHandleEnumsResult>>
type PkgSomeHandlerHandler = () => Promise<ApiResponse<pkg_SomeHandlerRes>>
export type ApiClient = {
    main: {
        ExampleHandler1: MainExampleHandler1Handler
        ExampleHandler2: MainExampleHandler2Handler
        HelloWorld: MainHelloWorldHandler
        getPlaylists: MainGetPlaylistsHandler
        ExampleWithExternalTypes: MainExampleWithExternalTypesHandler
        theHandler: MainTheHandlerHandler
        theHandlerPtr: MainTheHandlerPtrHandler
        circular: MainCircularHandler
        weHandleInputPointers: MainWeHandleInputPointersHandler
        weAlsoHandleEnums: MainWeAlsoHandleEnumsHandler
    }
    pkg: {
        SomeHandler: PkgSomeHandlerHandler
    }
}
export type main_User = {
    name: string
    age: number
    created: string
}
export type main_ExampleParams = {
    name: string
    users: main_User[] | null
}
export type main_ExampleResponse = {
    greeting: string
}
export type main_HelloWorldOutput = {
    result: string
}
export type main_Playlist = {
    id: string
    playlistId: string
    title: string
    pinned: boolean
    description: string
}
export type pkg_Type1 = {
    Name: string
    Age: number
}
export type pkg_Type2 = {
    Type: pkg_Type1
}
export type main_Node = {
    Children: main_Node[] | null
}
export type main_PointersAreUndefined = {
    APtr?: string
    AnotherPtr?: {
        name: string
    }
}
export type main_weHandleInputPointersOutput = {
    APtrIsUndefined: boolean
    AnotherPtrIsUndefined: boolean
}
export type main_EnumLike = {
    Opt1?: string
    Opt2?: {
        name: string
        age: number
    }
}
export type main_weAlsoHandleEnumsResult = {
    Opt1WasFilled: boolean
    Opt2WasFilled: boolean
}
export type pkg_SomeHandlerReq = {}
export type pkg_SomeHandlerRes = {}

export type ApiClientConfig = {
    beforeRequest?: (config: RequestInit) => void | Promise<void>
}

export const REQUEST_ABORTED = 'REQUEST_ABORTED'

export function createApiClient(baseUrl: string, config?: ApiClientConfig): ApiClient {
    async function doFetch(path: string, params?: unknown) {
        try {
            if (params === undefined) {
                params = {}
            }

            const requestConfig: RequestInit = {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(params ?? {}),
            }

            if (config?.beforeRequest) {
                await config.beforeRequest(requestConfig)
            }

            const response = await fetch(`${baseUrl}/${path}`, requestConfig)
            if (!response.ok) {
                const data = await response.json()
                const message = data.message

                return {
                    data: null,
                    error: { message, statusCode: response.status },
                }
            }
            const data = await response.json()
            return { data, error: null }
        } catch (error) {
            if (error instanceof DOMException && error.name === 'AbortError') {
                return {
                    data: null,
                    error: {
                        message: REQUEST_ABORTED,
                    },
                }
            }
            return {
                data: null,
                error: {
                    message: error instanceof Error ? error.message : 'Unknown error occurred',
                },
            }
        }
    }
    const client: ApiClient = {
        main: {
            ExampleHandler1: (params) => doFetch('main.ExampleHandler1', params),
            ExampleHandler2: (params) => doFetch('main.ExampleHandler2', params),
            HelloWorld: () => doFetch('main.HelloWorld'),
            getPlaylists: () => doFetch('main.getPlaylists'),
            ExampleWithExternalTypes: (params) => doFetch('main.ExampleWithExternalTypes', params),
            theHandler: () => doFetch('main.theHandler'),
            theHandlerPtr: () => doFetch('main.theHandlerPtr'),
            circular: (params) => doFetch('main.circular', params),
            weHandleInputPointers: (params) => doFetch('main.weHandleInputPointers', params),
            weAlsoHandleEnums: (params) => doFetch('main.weAlsoHandleEnums', params),
        },
        pkg: {
            SomeHandler: () => doFetch('pkg.SomeHandler'),
        },
    }
    return client
}
